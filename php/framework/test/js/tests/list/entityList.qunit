(function () {
    "use strict";

    var $templateLoader = $.Deferred(),
        constants = travi.framework.entityList.constants;

    $.when(
        travi.loadTemplate('/resources/shared/templates/pagination.tmpl', 'pagination'),

        $.Deferred(function (deferred) {
            $(deferred.resolve);
        })
    ).done(function () {
        $templateLoader.resolve();
    });

    module("Remove Confirmation", {
        setup: function () {
            $('body').append('<div id="scratch">');
            $('#entity-list').tmpl().appendTo('#scratch');
            travi.framework.entityList.init();
        },
        teardown: function () {
            $('#scratch').remove();
            $('#confirmation').dialog('destroy').remove();
        }
    });

    test("confirmation button text", function () {
        //Setup
        travi.framework.entityList.setButtonText('Remove');
        $('form').submit();

        expect(2);
        //Verify
        strictEqual(travi.framework.entityList.getButtonText(), 'Remove', "Button text reported correctly");
        strictEqual($('#confirmation').dialog('option', 'buttons')[0].text, 'Remove', "Button text displayed correctly");
    });


    test("confirmation message", function () {
        //Setup
        travi.framework.entityList.setConfirmationMessage('Are you sure you wish to REMOVE this announcement?');
        expect(2);

        //Verify
        strictEqual($('#confirmation').text(), 'Are you sure you wish to REMOVE this announcement?',
                "Confirmation message correct");
        strictEqual($('#confirmation').dialog('option', 'title'), 'Are you sure?', "Title text correct");
    });

    $templateLoader.done(function () {

        $.mockjax({
            url: "/admin/updates/?offset=5",
            contentType: 'text/json',
            responseText: {
                test: "test",
                updates: {
                    updateList: {
                        entities: [
                            {}
                        ],
                        offset: 5
                    }
                }
            }
        });
        $.mockjax({
            url: "/admin/updates/?offset=0",
            contentType: 'text/json',
            responseText: {
                test: "test",
                updates: {
                    updateList: {
                        entities: [
                            {}
                        ]
                    }
                }
            }
        });
        module("Paging", {
            setup: function () {
                $('body').append('<div id="scratch">');
                $('#entity-list').tmpl().appendTo('#scratch');
                $('#scratch')
                    .append($.tmpl("pagination", {
                        controller: 'admin/updates',
                        nextOffset: 5,
                        prevOffset: 0
                    }));
                travi.framework.entityList.init();
            },
            teardown: function () {
                $('#scratch').remove();
                $(document).unbind(constants.get('PAGE_EVENT'));
            }
        });
        asyncTest("Request for more updates loads more items into page", function () {
            expect(4);

            $(document).bind(constants.get('PAGE_EVENT'), function () {
                ok(true, "response received from server");
                strictEqual($('ol.entityList > li').length, 2);
                ok(!$('#previousUpdates').parent().hasClass(constants.get('HIDDEN_CLASS')), "'back' link visible");
                ok(!$('.pipeDivider').hasClass(constants.get('HIDDEN_CLASS')), "Divider visible");

                start();
            });
            $('#moreUpdates').click();
        });
        asyncTest("Request for previous updates loads more items into page", function () {
            expect(2);

            $(document).bind(constants.get('PAGE_EVENT'), function () {
                ok(true, "response received from server");
                strictEqual($('ol.entityList > li').length, 2);

                start();
            });
            $('#previousUpdates').click();
        });
        asyncTest("return to first page", function () {
            var $prevUpdates = $('#previousUpdates'),
                $divider = $('.pipeDivider');
            expect(2);
            $prevUpdates.parent().removeClass('outOfRange');
            $divider.removeClass('outOfRange');

            $(document).bind(constants.get('PAGE_EVENT'), function () {
                ok($prevUpdates.parent().hasClass(constants.get('HIDDEN_CLASS')), "'back' link not visible");
                ok($divider.hasClass(constants.get('HIDDEN_CLASS')), "Divider not visible");

                start();
            });

            $prevUpdates.click();
        });
        test("load last page", function () {
            ok(false, 'missing functionality');
        });
    });
}());